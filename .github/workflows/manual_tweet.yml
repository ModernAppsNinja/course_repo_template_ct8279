name: manual_tweet
on:
  workflow_dispatch:
    inputs:
      tweet:
        description: 'Enter your Tweet'
        required: true
        default: ''

jobs:
  job_manual_tweet:

    name: Post a tweet
    runs-on: ubuntu-latest
    steps:
      - name: cat payload file
        run: cat /home/runner/work/_temp/_github_workflow/event.json
      - name: install dependencies for tweet.sh
        run: |
          sudo apt-get -y install nkf
      - name: pull tweet.sh script
        run: |
          curl -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          "https://raw.githubusercontent.com/piroor/tweet.sh/trunk/tweet.sh" \
          -o tweet.sh
          cat tweet.sh
      - name: post a tweet
        run: |
          ./tweet.sh post "${{ github.event.inputs.tweet }}"

      











      - name: set envar current_date with current date
        run: |
          echo current_date=$(date -u +"%Y-%m-%dT%TZ") >> $GITHUB_ENV
      - name: set envars for inputs
        run: |
          echo course_title=${{ github.event.inputs.course_title }} >> $GITHUB_ENV
          echo course_short_title=${{ github.event.inputs.course_short_title }} >> $GITHUB_ENV
          echo code_stub=${{ github.event.inputs.code_stub }} >> $GITHUB_ENV
          echo course_navbar_title=${{ github.event.inputs.course_navbar_title }} >> $GITHUB_ENV
          echo course_description=${{ github.event.inputs.course_description }} >> $GITHUB_ENV
      - name: check envars for inputs
        run: |
          echo course_title:
          echo $course_title
          echo course_short_title:
          echo $course_short_title
          echo code_stub:
          echo $code_stub
          echo course_description:
          echo $course_description
## For content ID creation, he while based logic below is preferred over current method, however, actions does not currently support while loops in bash
## Leaving the logic here for reference as in future use this if actins adds loop support or move to similar in container or javascript action
      # - name: create content ID
      #   run: |
      #     # set content loop counter to 0
      #     export content_id_loop=0
      #     # use while loop to repeat content id random selection until unique value is found
      #     while [ $content_id_loop -eq 0 ]; do
      #       export content_id_random=$(echo $(shuf -i 1001-9799 -n1))
      #       echo $content_id_random
      #       export content_id_candidate=$(echo $code_stub$content_id_random)
      #       echo $content_id_candidate
      #       # curl content id index to see if candidate ID is available
      #       curl \
      #         -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
      #         -H "Accept: application/vnd.github.v3+json" \
      #         "https://api.github.com/repos/modernappsninja/admin-private/contents/appdata/content_id_index/$content_id_candidate" \
      #         > /tmp/check_content_id_response
      #       cat /tmp/check_content_id_response
      #       # extract name field from curl, which is returned if the content id candidate is already present in index
      #       cat /tmp/check_content_id_response | jq -r '.name' >> /tmp/check_content_id_response name
      #       # if the response is less than 5 lines, the file was not found, if 5 or more lines, the candidate content id was found
      #       if [ "$(cat /tmp/check_content_id_response_name)" = "$content_id_candidate" ]
      #       then
      #         echo "this ID is in use, the loop will now attempt to find a new, unused ID Value"
      #       else
      #         echo "this id value is not yet in use, please proceed"
      #         export content_id=$content_id_candidate
      #         echo content_id=$content_id_candidate >> $GITHUB_ENV
      #         # set the content id ready value to 1
      #         export content_id_ready=1
      #         echo content_id_ready=1 >> $GITHUB_ENV
      #         # create course_repo_name
      #         echo course_repo_name=$course_short_title_$content_id >> $GITHUB_ENV
      #         export course_repo_name=$course_short_title_$content_id >> $GITHUB_ENV
      #         # post the new content id file to the content id index collection
      #         curl -X PUT \
      #           -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
      #           -H "Accept: application/vnd.github.v3+json" \
      #           -d '{"message": "Adding new content ID: '$content_id' For Course Title: ${{ github.event.inputs.course_title }}", "content": ""}' \
      #           "https://api.github.com/repos/modernappsninja/admin-private/contents/appdata/content_id_index/$content_id" \
      #           -o /tmp/content_id_post_response.json
      #         cat /tmp/content_id_post_response.json
      #       fi
      #     done

      - name: initialize variables for course id creation
        run: |
          echo content_id_ready=0 >> $GITHUB_ENV
          echo content_id_random=$(shuf -i 1001-9799 -n1) >> $GITHUB_ENV
      - name: initialize content_id_candidate value for course id creation
        run: |
          echo $content_id_ready
          echo $content_id_random
          echo content_id_candidate=${{ github.event.inputs.code_stub }}${{ env.content_id_random }} >> $GITHUB_ENV
      - name: Course ID create Attempt 1
        run: |
          echo $content_id_candidate
          # curl content id index to see if content_id_candidate is already present
          curl \
            -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/modernappsninja/admin-private/contents/appdata/content_id_index/${{ env.content_id_candidate }}" >> /tmp/check_content_id
          # extract name field from response - note that name field is only present if id is found in index
          cat /tmp/check_content_id | jq -r '.name' >> /tmp/check_content_id_response_name
          # if the file exists, return will include a name field with the name which should match the content_id_candidate value
          if [ "$(cat /tmp/check_content_id_response_name)" = "${{ env.content_id_candidate }}" ]
          then
            echo "this ID is in use, resetting variables for next step to try again"
            echo content_id_random=$(shuf -i 1001-9799 -n1) >> $GITHUB_ENV
          else
            echo "this id value is not yet in use, please proceed"
            echo content_id=${{ env.content_id_candidate }} >> $GITHUB_ENV
            # set the content id ready value to 1
            echo content_id_ready=1 >> $GITHUB_ENV
            # create course_repo_name
            echo course_repo_name=${{ github.event.inputs.course_short_title }}_${{ env.content_id_candidate }} >> $GITHUB_ENV
            # post the new content id file to the content id index collection
            curl -X PUT \
              -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{"message": "Adding new content ID: ${{ env.content_id_candidate }} For Course Title: ${{ github.event.inputs.course_title }}", "content": ""}' \
              "https://api.github.com/repos/modernappsninja/admin-private/contents/appdata/content_id_index/${{ env.content_id_candidate }}" \
              -o /tmp/content_id_post_response.json
            cat /tmp/content_id_post_response.json
          fi
      - name: initialize content_id_candidate value for course id creation attempt 2
        if: env.content_id_ready == '0'
        run: |
          echo content_id_candidate=$(echo ${{ github.event.inputs.code_stub }}${{ env.course_id_random }}) >> $GITHUB_ENV
      - name: Course ID create Attempt 2
        if: env.content_id_ready == '0'
        run: |
          echo $content_id_random
          echo $content_id_candidate
          # curl content id index to see if candidate ID is available
          curl \
            -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/modernappsninja/admin-private/contents/appdata/content_id_index/${{ env.content_id_candidate }}" >> /tmp/check_content_id_response_name
          # if the response is less than 5 lines, the file was not found, if 5 or more lines, the candidate content id was found
          if [ "$(cat /tmp/check_content_id_response_name)" = "${{ env.content_id_candidate }}" ]
          then
            echo "this ID is in use, resetting variables for next step to try again"
            echo content_id_random=$(shuf -i 1001-9799 -n1) >> $GITHUB_ENV
          else
            echo "this id value is not yet in use, please proceed"
            echo content_id=${{ env.content_id_candidate }} >> $GITHUB_ENV
            # set the content id ready value to 1
            echo content_id_ready=1 >> $GITHUB_ENV
            # create course_repo_name
            echo course_repo_name=${{ github.event.inputs.course_short_title }}_${{ env.content_id_candidate }} >> $GITHUB_ENV
            # post the new content id file to the content id index collection
            curl -X PUT \
              -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{"message": "Adding new content ID: ${{ env.content_id_candidate }} For Course Title: ${{ github.event.inputs.course_title }}", "content": ""}' \
              "https://api.github.com/repos/modernappsninja/admin-private/contents/appdata/content_id_index/${{ env.content_id_candidate }}" \
              -o /tmp/content_id_post_response.json
            cat /tmp/content_id_post_response.json
          fi
      - name: initialize content_id_candidate value for course id creation attempt 3
        if: env.content_id_ready == '0'
        run: |
          echo content_id_candidate=$(echo ${{ github.event.inputs.code_stub }}${{ env.course_id_random }}) >> $GITHUB_ENV
      - name: Course ID create Attempt 3
        if: env.content_id_ready == '0'
        run: |
          echo $content_id_random
          echo $content_id_candidate
          # curl content id index to see if candidate ID is available
          curl \
            -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/modernappsninja/admin-private/contents/appdata/content_id_index/${{ env.content_id_candidate }}" >> /tmp/check_content_id_response_name
          # if the response is less than 5 lines, the file was not found, if 5 or more lines, the candidate content id was found
          if [ "$(cat /tmp/check_content_id_response_name)" = "${{ env.content_id_candidate }}" ]
          then
            echo "this ID is in use, resetting variables for next step to try again"
            echo content_id_random=$(shuf -i 1001-9799 -n1) >> $GITHUB_ENV
          else
            echo "this id value is not yet in use, please proceed"
            echo content_id=${{ env.content_id_candidate }} >> $GITHUB_ENV
            # set the content id ready value to 1
            echo content_id_ready=1 >> $GITHUB_ENV
            # create course_repo_name
            echo course_repo_name=${{ github.event.inputs.course_short_title }}_${{ env.content_id_candidate }} >> $GITHUB_ENV
            # post the new content id file to the content id index collection
            curl -X PUT \
              -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{"message": "Adding new content ID: ${{ env.content_id_candidate }} For Course Title: ${{ github.event.inputs.course_title }}", "content": ""}' \
              "https://api.github.com/repos/modernappsninja/admin-private/contents/appdata/content_id_index/${{ env.content_id_candidate }}" \
              -o /tmp/content_id_post_response.json
            cat /tmp/content_id_post_response.json
          fi
      - name: initialize content_id_candidate value for course id creation attempt 4
        if: env.content_id_ready == '0'
        run: |
          echo content_id_candidate=$(echo ${{ github.event.inputs.code_stub }}${{ env.course_id_random }}) >> $GITHUB_ENV
      - name: Course ID create Attempt 4
        if: env.content_id_ready == '0'
        run: |
          echo $content_id_random
          echo $content_id_candidate
          # curl content id index to see if candidate ID is available
          curl \
            -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/modernappsninja/admin-private/contents/appdata/content_id_index/${{ env.content_id_candidate }}" >> /tmp/check_content_id_response_name
          # if the response is less than 5 lines, the file was not found, if 5 or more lines, the candidate content id was found
          if [ "$(cat /tmp/check_content_id_response_name)" = "${{ env.content_id_candidate }}" ]
          then
            echo "this ID is in use, resetting variables for next step to try again"
            echo content_id_random=$(shuf -i 1001-9799 -n1) >> $GITHUB_ENV
          else
            echo "this id value is not yet in use, please proceed"
            echo content_id=${{ env.content_id_candidate }} >> $GITHUB_ENV
            # set the content id ready value to 1
            echo content_id_ready=1 >> $GITHUB_ENV
            # create course_repo_name
            echo course_repo_name=${{ github.event.inputs.course_short_title }}_${{ env.content_id_candidate }} >> $GITHUB_ENV
            # post the new content id file to the content id index collection
            curl -X PUT \
              -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{"message": "Adding new content ID: ${{ env.content_id_candidate }} For Course Title: ${{ github.event.inputs.course_title }}", "content": ""}' \
              "https://api.github.com/repos/modernappsninja/admin-private/contents/appdata/content_id_index/${{ env.content_id_candidate }}" \
              -o /tmp/content_id_post_response.json
            cat /tmp/content_id_post_response.json
          fi
      - name: create new course repository
        run: |
          curl -X POST \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          -d '{"name":"${{ env.course_repo_name }}"}' \
          "https://api.github.com/orgs/modernappsninja/repos" \
          -o /tmp/course_repo_create_curl_response.json
          cat /tmp/course_repo_create_curl_response.json
      - name: set repository name for source template to be copied as source_repo_name
        run: |
          echo source_repo_name=course_repo_template_ct8279 >> $GITHUB_ENV
      - name: clone ninja_course_template
        run: |
          git clone https://${{ secrets.NINJABOTGURU }}:x-oauth-basic@github.com/modernappsninja/${{ env.source_repo_name }}.git
      # - name: create hub config file
      #   run: |
      #     echo "---" > ~/.config/hub
      #     echo "github.com: " >> ~/.config/hub
      #     echo "- oauth_token: ${{ secrets.NINJABOTGURU }}" >> ~/.config/hub
      #     echo "  user: modernappsninjabot" >> ~/.config/hub
      #     cat ~/.config/hub
      - name: update config.toml file with new course variables
        run: |
          cd ${{ env.source_repo_name }}
          sed -i '/^baseURL/c\baseURL = "https://modernappsninja.github.io/${{ env.course_repo_name }}"' config.toml
          sed -i '/^title =/c\title = "${{ github.event.inputs.course_title }}"' config.toml
          sed -i '/^description =/c\description = "${{ github.event.inputs.course_description }}"' config.toml
          sed -i '/^url_latest_version =/c\url_latest_version = "https://modernappsninja.github.io/${{ env.course_repo_name }}/"' config.toml
          sed -i '/^github_repo =/c\github_repo = "https://github.com/ModernAppsNinja/${{ env.course_repo_name }}/"' config.toml
          cat config.toml
      - name: update homepage _index.html file with new course variables
        run: |
          cd ${{ env.source_repo_name }}
          sed -i '/^title:/c\title: "${{ github.event.inputs.course_title }}"' content/en/_index.html
          sed -i '/^linkTitle:/c\linkTitle: "${{ github.event.inputs.course_navbar_title }}"' content/en/_index.html
          sed -i '/cover title=/c\{{< blocks/cover title="Welcome to '{{ github.event.inputs.course_title }}'" image_anchor="top" height="full" color="orange" >}}' content/en/_index.html
          cat content/en/_index.html
      - name: envsubst course metadata file
        run: |
          cd ${{ env.source_repo_name }}
          envsubst <"static/admin/assets/coursecards/course_meta.yml.template" > /tmp/course_meta.yml.tmp
          mv -f /tmp/course_meta.yml.tmp static/admin/assets/coursecards/course_meta.yml
          cat static/admin/assets/coursecards/course_meta.yml
      - name: update content/en/docs_index.md file front matter values to match new course
        run: |
          cd ${{ env.source_repo_name }}
          sed -i '/^title:/c\title: "${{ github.event.inputs.course_title }}"' content/en/docs/_index.md
          sed -i '/^linkTitle:/c\linkTitle: "${{ github.event.inputs.course_navbar_title }}"' content/en/docs/_index.md
          cat content/en/docs/_index.md
      - name: delete create course workflow as it should only be present and used from the new course template repository and not from child sites
        run: |
          cd ${{ env.source_repo_name }}
          sudo rm -f .github/workflows/create_new_course.yml
      - name: set git origin to new course repo and push
        run: |
          cd ${{ env.source_repo_name }}
          git remote set-url origin https://${{ secrets.NINJABOTGURU }}:x-oauth-basic@github.com/modernappsninja/${{ env.course_repo_name }}.git
          cat .git/config
          git branch -M main
          git push -u origin main
          git add .
          git commit -m "initial push"
          git push
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true
      - name: initial hugo build
        run: |
          cd ${{ env.source_repo_name }}
          echo "public" >> .gitignore
          git checkout --orphan gh-pages
          git reset --hard
          git commit --allow-empty -m "Initializing gh-pages branch"
          git push origin gh-pages
          git checkout main
          sudo rm -rf public
          git worktree add -B gh-pages public origin/gh-pages
          hugo --minify
          cd public
          git add --all
          git commit -m "Publishing to gh-pages"
          cd ..
          git push origin gh-pages
      - name: enable github pages for new course repo
        run: |
          curl -X POST \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          -H "Accept: application/vnd.github.switcheroo-preview+json" \
          -d '{"source":{"branch":"gh-pages","path":"/"}}' \
          "https://api.github.com/repos/modernappsninja/${{ env.course_repo_name }}/pages" \
          -o /tmp/member_repo_enable_pages_response.json
          cat /tmp/member_repo_enable_pages_response.json
      - name: gather ID and slug for modernappsninja members, triagers, collaborators, maintainers and admin teams
        run: |
          curl -s \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          "https://api.github.com/orgs/modernappsninja/teams" \
          -o /tmp/ninja_teams_list.json
          # gather members team id
          cat /tmp/ninja_teams_list.json | jq -r 'map(select(.name=="'Members'")) | .[].id' > /tmp/members_team_id
          cat /tmp/members_team_id
          echo members_team_id=$(cat /tmp/members_team_id) >> $GITHUB_ENV
          # gather members team slug
          cat /tmp/ninja_teams_list.json | jq -r 'map(select(.name=="'Members'")) | .[].slug' > /tmp/members_team_slug
          cat /tmp/members_team_slug
          echo members_team_slug=$(cat /tmp/members_team_slug) >> $GITHUB_ENV
          # gather triagers team id
          cat /tmp/ninja_teams_list.json | jq -r 'map(select(.name=="'Triagers'")) | .[].id' > /tmp/triagers_team_id
          cat /tmp/triagers_team_id
          echo triagers_team_id=$(cat /tmp/triagers_team_id) >> $GITHUB_ENV
          # gather triagers team slug
          cat /tmp/ninja_teams_list.json | jq -r 'map(select(.name=="'Triagers'")) | .[].slug' > /tmp/triagers_team_slug
          cat /tmp/triagers_team_slug
          echo triagers_team_slug=$(cat /tmp/triagers_team_slug) >> $GITHUB_ENV
          # gather collaborators team id
          cat /tmp/ninja_teams_list.json | jq -r 'map(select(.name=="'Collaborators'")) | .[].id' > /tmp/collaborators_team_id
          cat /tmp/collaborators_team_id
          echo collaborators_team_id=$(cat /tmp/collaborators_team_id) >> $GITHUB_ENV
          # gather collaborators team slug
          cat /tmp/ninja_teams_list.json | jq -r 'map(select(.name=="'Collaborators'")) | .[].slug' > /tmp/collaborators_team_slug
          cat /tmp/collaborators_team_slug
          echo collaborators_team_slug=$(cat /tmp/collaborators_team_slug) >> $GITHUB_ENV
          # gather maintainers team id
          cat /tmp/ninja_teams_list.json | jq -r 'map(select(.name=="'Maintainers'")) | .[].id' > /tmp/maintainers_team_id
          cat /tmp/maintainers_team_id
          echo maintainers_team_id=$(cat /tmp/maintainers_team_id) >> $GITHUB_ENV
          # gather maintainers team slug
          cat /tmp/ninja_teams_list.json | jq -r 'map(select(.name=="'Maintainers'")) | .[].slug' > /tmp/maintainers_team_slug
          cat /tmp/maintainers_team_slug
          echo maintainers_team_slug=$(cat /tmp/maintainers_team_slug) >> $GITHUB_ENV
          # gather admins team id
          cat /tmp/ninja_teams_list.json | jq -r 'map(select(.name=="'Admins'")) | .[].id' > /tmp/admins_team_id
          cat /tmp/admins_team_id
          echo admins_team_id=$(cat /tmp/admins_team_id) >> $GITHUB_ENV
          # gather admins team slug
          cat /tmp/ninja_teams_list.json | jq -r 'map(select(.name=="'Admins'")) | .[].slug' > /tmp/admins_team_slug
          cat /tmp/admins_team_slug
          echo admins_team_slug=$(cat /tmp/admins_team_slug) >> $GITHUB_ENV
      - name: create new course team in org structure as modernappsninja/members/triagers/course_repo_name
        run: |
          curl -X POST \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"name":"${{ env.course_repo_name }}", "parent_team_id":${{ env.triagers_team_id }}}' \
          "https://api.github.com/orgs/modernappsninja/teams" \
          -o /tmp/add_course_team_response.json
          cat /tmp/add_course_team_response.json          
          cat /tmp/add_course_team_response.json | jq -r '.id' > /tmp/course_team_id
          echo course_team_id=$(cat /tmp/course_team_id) >> $GITHUB_ENV
          cat /tmp/add_course_team_response.json | jq -r '.slug' > /tmp/course_team_slug
          echo course_team_slug=$(cat /tmp/course_team_slug) >> $GITHUB_ENV
      - name: add course creation requesting github user account to modernapps ninja maintainers team
        run: |
          curl -X PUT \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"role":"member"}' \
          "https://api.github.com/orgs/modernappsninja/teams/${{ env.maintainers_team_slug }}/memberships/${{ github.event.sender.login }}" \
          -o /tmp/add_maintainer_response.json
          cat /tmp/add_maintainer_response.json
      - name: add course creation requesting github user account to course team as team maintainer
        run: |
          curl -X PUT \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"role":"maintain"}' \
          "https://api.github.com/orgs/modernappsninja/teams/${{ env.course_team_slug }}/memberships/${{ github.event.sender.login }}" \
          -o /tmp/add_course_maintainer_response.json
          cat /tmp/add_course_maintainer_response.json
      - name: add course repo to modernappsninja triagers team with triage permissions
        run: |
          curl -X PUT \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"permission":"triage"}' \
          "https://api.github.com/orgs/modernappsninja/teams/${{ env.triagers_team_slug }}/repos/modernappsninja/${{ env.course_repo_name }}" \
          -o /tmp/add_repo_triagers_team_response.json
          cat /tmp/add_repo_triagers_team_response.json
      - name: add course repo to modernappsninja collaborators team with write permissions
        run: |
          curl -X PUT \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"permission":"push"}' \
          "https://api.github.com/orgs/modernappsninja/teams/${{ env.collaborators_team_slug }}/repos/modernappsninja/${{ env.course_repo_name }}" \
          -o /tmp/add_repo_collaborators_team_response.json
          cat /tmp/add_repo_collaborators_team_response.json
      - name: add course repo to modernappsninja maintainers team with maintainer permissions
        run: |
          curl -X PUT \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"permission":"maintain"}' \
          "https://api.github.com/orgs/modernappsninja/teams/${{ env.maintainers_team_slug }}/repos/modernappsninja/${{ env.course_repo_name }}" \
          -o /tmp/add_repo_to_maintainers_team_response.json
          cat /tmp/add_repo_to_maintainers_team_response.json
      - name: add course repo to modernappsninja admins team with admin permissions
        run: |
          curl -X PUT \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"permission":"admin"}' \
          "https://api.github.com/orgs/modernappsninja/teams/${{ env.admins_team_slug }}/repos/modernappsninja/${{ env.course_repo_name }}" \
          -o /tmp/add_repo_admins_team_response.json
          cat /tmp/add_repo_admins_team_response.json
      - name: create course catalog card
        run: |
          cd ${{ env.source_repo_name }}
          cat static/admin/assets/coursecards/course_meta.yml > /tmp/${{ env.course_repo_name }}.md
          cat static/admin/assets/coursecards/catalogcard/catalog_course_card_stub.md >> /tmp/${{ env.course_repo_name }}.md
          cat /tmp/${{ env.course_repo_name }}.md | base64 -w 0 > /tmp/${{ env.course_repo_name }}.md.base64
      - name: post course card to catalog
        run: |
          curl -X PUT \
              -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{"message": "Adding new course card for: ${{ env.course_repo_name }}", "content": "'$(cat /tmp/${{ env.course_repo_name }}.md.base64)'"' \
              "https://api.github.com/repos/modernappsninja/modernappsninja.github.io/contents/content/english/course/${{ env.course_repo_name }}.md" \
              -o /tmp/content_id_post_response.json
            cat /tmp/content_id_post_response.json
      - name: add new label for course to modernappsninja.github.io
        run: |
          curl -X POST \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"name":"${{ env.course_repo_name }}"}' \
          "https://api.github.com/repos/modernappsninja/modernappsninja.github.io/labels" \
          -o /tmp/add_course_label_response.json
          cat /tmp/add_course_label_response.json
      - name: curl modernappsninja/modernappsninja.github.io labels and save to file
        run: |
          curl \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/modernappsninja/modernappsninja.github.io/labels" \
          -o /tmp/ninja_label_list.json
          cat /tmp/ninja_label_list.json
      - name: replicate ninja label list on new course repo
        run: |
          IFS=$'\n'
          File="/tmp/ninja_label_list.json"
          Loops=$(cat $File | jq -r '.[].name' | wc -l)
          Loopnum=1
          while [ $Loopnum -lt $Loops ]
          do
            echo "this is loopnum: $Loopnum"
            name=$(cat $File | jq '.['$Loopnum'].name')
            echo "name is: $name"
            description=$(cat $File | jq '.['$Loopnum'].description')
            echo "description is $description"
            color=$(cat $File | jq '.['$Loopnum'].color')
            echo "color is $color"
            curl -X POST \
              -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/modernappsninja/${{ env.course_repo_name }}/labels" \
              -d '{"name": '$name', "description": '$description', "color": '$color'}' \
              -o /tmp/loop${Loopnum}_label_post_return.json
              cat /tmp/loop${Loopnum}_label_post_return.json
            echo "the curl call for loopnum $Loopnum completed"
            export Loopnum=$(($Loopnum+1))
            echo the next loopnum is now set as: $Loopnum
          done
      - name: create discussion message on course team page with details on new course assets
        run: |
          body='Welcome to the ${{ env.course_repo_name }} course team @${{ github.event.sender.login }}!
          The  new course repository for ${{ env.course_repo_name }} is now available at:
          [https://github.com/modernappsninja/${{ env.course_repo_name }}/](https://github.com/modernappsninja/${{ env.course_repo_name }}/)
          The new course is now in a live but unpublished state. 
          You can view your new course website in the same way as if it were published, the key difference is it is not yet shown in the modernapps.ninja course catalog.
          You can view instructions on customizing and publishing the new course on the new course website at:
          [https://modernapps.ninja/${{ env.course_repo_name }}/](https://modernapps.ninja/${{ env.course_repo_name }}/)
          You can find further information on customizing and publishing the course on the [New Course Template Site](https://modernapps.ninja/course_repo_template_ct8279/)
          Thank you for contributing to the ModernApps Ninja Community!'
          curl -X POST \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"title":"Welcome to the course team!","body":"$body"}' \
          "https://api.github.com/orgs/modernappsninja/teams/${{ env.course_team_slug }}/discussions" \
          -o /tmp/add_course_team_discussion_response.json
          cat /tmp/add_course_team_discussion_response.json
      - name: create issue ticket on new course repo with details on new course assets
        run: |
          body='Welcome to the ${{ env.course_repo_name }} course team @${{ github.event.sender.login }}!
          The  new course repository for ${{ env.course_repo_name }} is now available at:
          [https://github.com/modernappsninja/${{ env.course_repo_name }}/](https://github.com/modernappsninja/${{ env.course_repo_name }}/)
          The new course is now in a live but unpublished state. 
          You can view your new course website in the same way as if it were published, the key difference is it is not yet shown in the modernapps.ninja course catalog.
          You can view instructions on customizing and publishing the new course on the new course website at:
          [https://modernapps.ninja/${{ env.course_repo_name }}/](https://modernapps.ninja/${{ env.course_repo_name }}/)
          You can find further information on customizing and publishing the course on the [New Course Template Site](https://modernapps.ninja/course_repo_template_ct8279/)
          Please close this issue ticket, you can view it again any time by viewing closed issue tickets.
          Thank you for contributing to the ModernApps Ninja Community!'
          curl -X POST \
          -H "Authorization: token ${{ secrets.NINJABOTGURU }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"title":"Welcome to the new course repository!","body":"$body"}' \
          "https://api.github.com/repos/modernappsninja/${{ env.course_repo_name }}/issues" \
          -o /tmp/add_issue_message_response.json
          cat /tmp/add_issue_message_response.json